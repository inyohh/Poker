/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab_2_2.webWork.Poker.src.test.java.Poker;

import lab_2_2.webWork.Poker.src.main.java.Poker.App;
import lab_2_2.webWork.Poker.src.main.java.Poker.Poker;
import lab_2_2.webWork.Poker.src.main.java.Poker.Pokers;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void shouldReturn_AH_WhenGivePoker_A_H(){
        Poker poker=new Poker('A','H');
        String strPoker=poker.toString();
        Assertions.assertEquals("AH",strPoker);
    }

    @Test void shouldReturn_9_WhenGivePoker_9_D(){
        Poker poker=new Poker('9','D');
        int value=poker.getIDValue();
        Assertions.assertEquals(9,value);
    }

    @Test void shouldReturn_83_WhenGivePoker_J_S(){
        Poker poker=new Poker('J','S');
        int value=poker.getTypeValue();
        Assertions.assertEquals(83,value);
    }

    @Test void shouldReturn_Royal_Flush_WhenGivePoker_TD_JD_QD_KD_AD(){
        Pokers pokers=new Pokers(new Poker('T','D'),new Poker('J','D'),
                new Poker('Q','D'),new Poker('K','D'),new Poker('A','D'));
        String pokersPriority=pokers.getPokersType().toString();
        Assertions.assertEquals("Royal_Flush",pokersPriority);
    }

    @Test void shouldReturn_Straight_WhenGivePoker_2H_3D_5S_4C_6D(){
        Pokers pokers=new Pokers(new Poker('2','H'),new Poker('3','D'),
                new Poker('5','S'),new Poker('4','C'),new Poker('6','D'));
        String pokersPriority=pokers.getPokersType().toString();
        Assertions.assertEquals("Straight",pokersPriority);
    }

    @Test void shouldReturn_1_WhenGivePoker_2H_3D_5S_4C_6D_TD_JD_QD_KD_AD(){
        Pokers pokers1=new Pokers(new Poker('2','H'),new Poker('3','D'),
                new Poker('5','S'),new Poker('4','C'),new Poker('6','D'));
        Pokers pokers2=new Pokers(new Poker('T','D'),new Poker('J','D'),
                new Poker('Q','D'),new Poker('K','D'),new Poker('A','D'));
        int value=pokers2.biggerThan(pokers1);
        Assertions.assertEquals(1,value);
    }
}
